"""
Menu Locator Manager Module
‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Menu Locators: homemenu, mainmenu, submenu, menuname
"""

import streamlit as st
import uuid
from typing import Dict, Any


def render_menu_locator_manager():
    """‡πÅ‡∏™‡∏î‡∏á UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Menu Locators"""
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å session state
    menu_locators = st.session_state.studio_workspace.get('menu_locators', {})
    
    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î
    if not menu_locators:
        st.info("No menu locators loaded. Please load a commonkeywords file first.")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î
    current_file = st.session_state.studio_workspace.get('common_keyword_path', 'Unknown')
    st.caption(f"üìÅ Source: **{current_file}**")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö sub-expander
    menu_types = [
        ('homemenu', 'üè† Home Menu', 'scalar'),
        ('mainmenu', 'üìã Main Menu', 'dict'),
        ('submenu', 'üìÇ Sub Menu', 'dict'),
        ('menuname', 'üè∑Ô∏è Menu Names', 'dict')
    ]
    
    for menu_key, menu_label, menu_type in menu_types:
        render_menu_section(menu_key, menu_label, menu_type, menu_locators)
    
    # ‡∏õ‡∏∏‡πà‡∏° Save Changes
    st.divider()
    col1, col2 = st.columns([1, 4])
    with col1:
        if st.button("üíæ Save to File", type="primary", use_container_width=True, key="save_menu_locators_btn"):
            save_menu_locators_to_file()

def render_menu_section(menu_key: str, menu_label: str, menu_type: str, menu_locators: Dict):
    """‡πÅ‡∏™‡∏î‡∏á section ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏°‡∏ô‡∏π"""
    
    menu_data = menu_locators.get(menu_key, {})
    
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô items
    item_count = 0
    if menu_type == 'scalar':
        item_count = 1 if menu_data.get('value') else 0
    else:
        item_count = len(menu_data.get('value', {})) if menu_data else 0
    
    with st.expander(f"{menu_label} ({item_count} items)", expanded=False):
        if menu_type == 'scalar':
            render_scalar_menu(menu_key, menu_data)
        else:
            render_dict_menu(menu_key, menu_data)


def render_scalar_menu(menu_key: str, menu_data: Dict):
    """‡πÅ‡∏™‡∏î‡∏á UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scalar menu (homemenu)"""
    
    current_value = menu_data.get('value', '') if menu_data else ''
    
    col1, col2 = st.columns([4, 1])
    
    with col1:
        new_value = st.text_input(
            "Locator Value",
            value=current_value,
            key=f"edit_{menu_key}_value",
            placeholder="e.g., //*[@id='home']"
        )
    
    with col2:
        st.write("")  # spacing
        st.write("")  # spacing
        if st.button("Update", key=f"btn_update_{menu_key}", use_container_width=True):
            if new_value.strip():
                st.session_state.studio_workspace['menu_locators'][menu_key] = {
                    'name': menu_key,
                    'value': new_value.strip(),
                    'type': 'scalar'
                }
                st.success(f"Updated {menu_key}")
                st.rerun()


def render_dict_menu(menu_key: str, menu_data: Dict):
    """‡πÅ‡∏™‡∏î‡∏á UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dict menu (mainmenu, submenu, menuname)"""
    
    items = menu_data.get('value', {}) if menu_data else {}
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î
    if items:
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏î‡πâ‡∏ß‡∏¢ container
        with st.container(height=300):
            for key, value in items.items():
                render_menu_item_card(menu_key, key, value)
    else:
        st.info(f"No items in {menu_key}. Add your first item below.")
    
    st.divider()
    
    # ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
    with st.form(key=f"form_add_{menu_key}"):
        st.write("**Add New Item**")
        col1, col2, col3 = st.columns([2, 3, 1])
        
        with col1:
            new_key = st.text_input("Key", key=f"new_key_{menu_key}", placeholder="e.g., userMgt")
        
        with col2:
            new_value = st.text_input("Value", key=f"new_value_{menu_key}", 
                                     placeholder="e.g., //a[@title='User Management']")
        
        with col3:
            st.write("")
            st.write("")
            submitted = st.form_submit_button("‚ûï Add", use_container_width=True)
        
        if submitted:
            if new_key.strip() and new_value.strip():
                add_menu_item(menu_key, new_key.strip(), new_value.strip())
                st.success(f"Added {new_key} to {menu_key}")
                st.rerun()
            else:
                st.error("Both key and value are required")


def render_menu_item_card(menu_key: str, item_key: str, item_value: str):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏° Edit/Delete"""
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á edit ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    edit_state_key = f"editing_{menu_key}_{item_key}"
    is_editing = st.session_state.get(edit_state_key, False)
    
    if is_editing:
        # ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        col1, col2, col3, col4 = st.columns([2, 3, 1, 1])
        
        with col1:
            new_key = st.text_input("Key", value=item_key, key=f"edit_key_{menu_key}_{item_key}", label_visibility="collapsed")
        
        with col2:
            new_value = st.text_input("Value", value=item_value, key=f"edit_value_{menu_key}_{item_key}", label_visibility="collapsed")
        
        with col3:
            if st.button("‚úÖ", key=f"save_{menu_key}_{item_key}", help="Save", use_container_width=True):
                update_menu_item(menu_key, item_key, new_key.strip(), new_value.strip())
                st.session_state[edit_state_key] = False
                st.rerun()
        
        with col4:
            if st.button("‚ùå", key=f"cancel_{menu_key}_{item_key}", help="Cancel", use_container_width=True):
                st.session_state[edit_state_key] = False
                st.rerun()
    
    else:
        # ‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        col1, col2, col3, col4 = st.columns([2, 3, 1, 1])
        
        with col1:
            st.markdown(f"**`{item_key}`**")
        
        with col2:
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            display_value = item_value if len(item_value) <= 50 else item_value[:47] + "..."
            st.text(display_value)
        
        with col3:
            if st.button("‚úèÔ∏è", key=f"edit_{menu_key}_{item_key}", help="Edit", use_container_width=True):
                st.session_state[edit_state_key] = True
                st.rerun()
        
        with col4:
            if st.button("üóëÔ∏è", key=f"delete_{menu_key}_{item_key}", help="Delete", use_container_width=True):
                delete_menu_item(menu_key, item_key)
                st.rerun()


def add_menu_item(menu_key: str, item_key: str, item_value: str):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô menu dict"""
    
    if menu_key not in st.session_state.studio_workspace['menu_locators']:
        st.session_state.studio_workspace['menu_locators'][menu_key] = {
            'name': menu_key,
            'value': {},
            'type': 'dict'
        }
    
    menu_data = st.session_state.studio_workspace['menu_locators'][menu_key]
    
    if 'value' not in menu_data or not isinstance(menu_data['value'], dict):
        menu_data['value'] = {}
    
    menu_data['value'][item_key] = item_value


def update_menu_item(menu_key: str, old_key: str, new_key: str, new_value: str):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô menu dict"""
    
    menu_data = st.session_state.studio_workspace['menu_locators'][menu_key]
    items = menu_data.get('value', {})
    
    # ‡∏•‡∏ö key ‡πÄ‡∏î‡∏¥‡∏°
    if old_key in items:
        del items[old_key]
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° key ‡πÉ‡∏´‡∏°‡πà
    items[new_key] = new_value
    
    menu_data['value'] = items


def delete_menu_item(menu_key: str, item_key: str):
    """‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å menu dict"""
    
    menu_data = st.session_state.studio_workspace['menu_locators'][menu_key]
    items = menu_data.get('value', {})
    
    if item_key in items:
        del items[item_key]
        menu_data['value'] = items
        st.toast(f"Deleted {item_key} from {menu_key}", icon="üóëÔ∏è")


def save_menu_locators_to_file():
    """
    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å menu locators ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå
    (FIXED: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå default ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô project path)
    """
    
    from modules.file_manager import update_menu_locators_in_file
    import os
    
    # 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• locators ‡∏à‡∏≤‡∏Å session state
    menu_locators = st.session_state.studio_workspace.get('menu_locators', {})
    if not menu_locators:
        st.error("No menu locators data to save.")
        return

    # --- Flag ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ---
    saved_all_files = True
    
    try:
        # --- 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå Default (Master) ---
        default_file_path = os.path.join(os.path.dirname(__file__), '..', 'assets', 'commonkeywords')
        
        if not os.path.exists(default_file_path):
            st.warning(f"Default file not found at: {default_file_path}. Skipping.")
            saved_all_files = False
        else:
            success_default = update_menu_locators_in_file(default_file_path, menu_locators)
            if success_default:
                st.toast("‚úÖ Saved to Default: assets/commonkeywords", icon="üíæ")
            else:
                st.error(f"‚ùå Failed to save to Default: {default_file_path}")
                saved_all_files = False

        # --- 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå Project (‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á Active) ---
        
        # ‡∏î‡∏∂‡∏á project_path ‡∏à‡∏≤‡∏Å st.session_state (‡∏ã‡∏∂‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô session_manager.py)
        project_path = st.session_state.get('project_path') 
        
        if not project_path:
            st.info("No active project path found. Skipping save to project file.")
            # ‡πÑ‡∏°‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Error ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
        else:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á path ‡πÑ‡∏õ‡∏¢‡∏±‡∏á commonkeywords.resource ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
            project_common_keyword_path = os.path.join(project_path, 'resources', 'commonkeywords.resource')
            
            if not os.path.exists(project_common_keyword_path):
                st.warning(f"Project file not found at: {project_common_keyword_path}. Skipping.")
                # ‡∏´‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ Error
            else:
                success_project = update_menu_locators_in_file(project_common_keyword_path, menu_locators)
                
                if success_project:
                    project_name = os.path.basename(project_path)
                    st.toast(f"‚úÖ Saved to Project: {project_name}/resources/commonkeywords.resource", icon="üìÅ")
                else:
                    st.error(f"‚ùå Failed to save to Project: {project_common_keyword_path}")
                    saved_all_files = False

        # --- 4. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• ---
        if saved_all_files:
            st.success("‚úÖ Menu locators saved successfully to all targets!")
        else:
            st.error("‚ùå Failed to save to one or more targets. Check messages above.")
            
    except Exception as e:
        st.error(f"An error occurred during save: {e}")